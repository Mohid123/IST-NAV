Use shp2pgsql tool to load roads shapefile to the pgadmin database. Make sure you have postgis extension installed.
CREATE EXTENSION POSTGIS and CREATE EXTENSION pgRouting;

-----First we set our SRID to 4326 and set geometry and add columns:

SELECT Find_SRID('public', 'my_table', 'geom');
--SELECT UpdateGeometrySRID('my_table','geom',4326);
--ALTER TABLE public.my_table 
--ALTER COLUMN geom TYPE geometry(MultiLineString,4326)
--USING ST_Force2D(geom);

----Then Create a new table as follows:
CREATE TABLE table_name(
id INTEGER,
lat_start FLOAT8,
lon_start FLOAT8,
lat_end FLOAT8,
lon_end FLOAT8,
geom geometry)

---Then use the following query to convert geometry of the roads or line table from MULTILINESTRING to LINESTRING (Remember pgRouting queries do not work propely for MULTILINESTRING geometry)

ALTER TABLE my_table
ALTER COLUMN geom TYPE geometry(linestring,4326) USING ST_GeometryN(geom, 1);

----Next add all columns from the roads_table to the new table:
INSERT INTO my_table
SELECT id, lat_start, lon_start, lat_end, lon_end, geom
FROM roads_table;

Next we will use create topology to calculate the nodes and edges of the roads

SELECT pgr_nodeNetwork('roads', 0.00001, 'id', 'geom');
SELECT pgr_createTopology('roads_noded', 0.00001, 'geom', 'id');

----Now we add two columns (name and distance) to our mytable_noded table

ALTER TABLE mytable_noded
ADD COLUMN name VARCHAR;

ALTER TABLE mytable_noded ADD distance FLOAT8;
UPDATE mytable_noded SET distance = ST_Length(ST_Transform(geom, 4326)::geography);


Then we run the disjkstra algorithm to check if it works or not.

SELECT * FROM pgr_dijkstra('SELECT id,source,target,distance as cost FROM mytable_noded',1,2,false);



Next we create our function pgr_fromAtoB that we will use in geoserver.

CREATE OR REPLACE FUNCTION pgr_fromAtoB(
    IN edges_subset varchar,
    IN x1 double precision,
    IN y1 double precision,
    IN x2 double precision,
    IN y2 double precision,
    OUT seq INTEGER,
    OUT cost FLOAT,
    OUT name TEXT,
    OUT geom geometry,
    OUT heading FLOAT
)
RETURNS SETOF record AS
$BODY$

WITH
dijkstra AS (
    SELECT * FROM pgr_dijkstra(
        'SELECT id, source, target, distance AS cost FROM ' || $1,
        -- source
        (SELECT id FROM mytable_noded_vertices_pgr
            ORDER BY the_geom <-> ST_SetSRID(ST_Point(x1,y1),4326) LIMIT 1),
        -- target
        (SELECT id FROM mytable_noded_vertices_pgr
            ORDER BY the_geom <-> ST_SetSRID(ST_Point(x2,y2),4326) LIMIT 1),
        false) -- undirected
    ),
    with_geom AS (
        SELECT dijkstra.seq, dijkstra.cost, mytable_noded.name,
        CASE
            WHEN dijkstra.node = mytable_noded.source THEN geom
            ELSE ST_Reverse(geom)
        END AS route_geom
        FROM dijkstra JOIN mytable_noded
        ON (edge = id) ORDER BY seq
    )
    SELECT *,
    ST_azimuth(ST_StartPoint(route_geom), ST_EndPoint(route_geom))
    FROM with_geom;
$BODY$
LANGUAGE 'sql';

After this query runs successfully check to make sure using the following query (if the query returns a geometry then it worked fine otherwise, the geometry conversion process from MULTI to LINE was unsuccessful so try that again)

SELECT ST_MakeLine(route.geom)  as test
FROM (SELECT *
      FROM pgr_fromAtoB('mytable_noded',your_lat_start,your_lat_end,your_lon_start,your_lon_end)
      ORDER BY seq
     ) As route

---In case we need to drop our function this below query will be used.

DROP FUNCTION pgr_fromAtoB(varchar, double precision,double precision, double precision, double precision);


Publish your roads_noded and roads_noded_vertices_pgr to geoserver using the ADD New layer option. Create a
workspace and store (store should be a POSTGIS store) if you haven't already
Publish your noded and noded_vertices_pgr tables
Then create a new SQL view in the same store by going to ADD new Layer

Name the query as pgRouting or any other name that you prefer
In the sql view write:

SELECT ST_MakeLine(route.geom) FROM (
    SELECT geom FROM pgr_fromAtoB('mytable_noded', %x1%, %y1%, %x2%, %y2%
  ) ORDER BY seq) AS route


Click Guess Parameters from SQL
ADD the following in the default value boxes:
y1  lat_start   
x1  lon_start
y2  lat_end
x2  lon_end

Set validation parameters to ^-?[\d.]+$

Click refresh and select geometry to LineString and set srid to 4326

And you're done. For the routing JS code Please see the routing.js file










