Use shp2pgsql tool to load roads shapefile to the pgadmin database. Make sure you have postgis extension installed.
CREATE EXTENSION POSTGIS;

-----First we set our SRID to 4326 and set geometry and add columns:

SELECT Find_SRID('public', 'roads', 'geom');
--SELECT UpdateGeometrySRID('roads','geom',4326);
--ALTER TABLE public.roads 
--ALTER COLUMN geom TYPE geometry(MultiLineString,4326)
--USING ST_Force2D(geom);
--UPDATE roads SET length = ST_Length(geom::geography);

ALTER TABLE roads ADD source INT4;
ALTER TABLE roads ADD target INT4;

Next we will use create topology to calculate the nodes and edges of the roads

SELECT pgr_nodeNetwork('roads', 0.00001, 'id', 'geom');
SELECT pgr_createTopology('roads_noded', 0.00001, 'id', 'geom'); (Note: If error occurs place 'geom' before 'id' in the syntax)

----Now we add three columns to our roads_noded table

ALTER TABLE roads_noded
ADD COLUMN name VARCHAR,
ADD COLUMN type VARCHAR;


UPDATE roads_noded AS new
 SET name=old.name, 
   type=old.distance 
FROM roads as old
WHERE new.old_id=old.id;

ALTER TABLE roads_noded ADD distance FLOAT8;

UPDATE roads_noded SET distance = ST_Length(ST_Transform(the_geom, 4326)::geography);



Then we run the disjkstra algorithm to check if it works or not.

SELECT * FROM pgr_dijkstra('SELECT id,source,target,distance as cost FROM roads_noded',1,2,false);



Next we create our function pgr_fromAtoB that we will use in geoserver.

CREATE OR REPLACE FUNCTION pgr_fromAtoB(
    IN edges_subset varchar,
    IN x1 double precision,
    IN y1 double precision,
    IN x2 double precision,
    IN y2 double precision,
    OUT seq INTEGER,
    OUT cost FLOAT,
    OUT name TEXT,
    OUT geom geometry,
    OUT heading FLOAT
)
RETURNS SETOF record AS
$BODY$

WITH
dijkstra AS (
    SELECT * FROM pgr_dijkstra(
        'SELECT id, source, target, distance AS cost FROM ' || $1,
        -- source
        (SELECT id FROM roads_noded_vertices_pgr
            ORDER BY the_geom <-> ST_SetSRID(ST_Point(x1,y1),4326) LIMIT 1),
        -- target
        (SELECT id FROM roads_noded_vertices_pgr
            ORDER BY the_geom <-> ST_SetSRID(ST_Point(x2,y2),4326) LIMIT 1),
        false) -- undirected
    ),
    with_geom AS (
        SELECT dijkstra.seq, dijkstra.cost, roads_noded.name,
        CASE
            WHEN dijkstra.node = roads_noded.source THEN geom
            ELSE ST_Reverse(geom)
        END AS route_geom
        FROM dijkstra JOIN roads_noded
        ON (edge = id) ORDER BY seq
    )
    SELECT *,
    ST_azimuth(ST_StartPoint(route_geom), ST_EndPoint(route_geom))
    FROM with_geom;
$BODY$
LANGUAGE 'sql';

After this query runs successfully we can move to the geoserver part

---In case we need to drop our function this below query will be used.

DROP FUNCTION pgr_fromAtoB(varchar, double precision,double precision, double precision, double precision);


Publish your roads_noded and roads_noded_vertices_pgr to geoserver using the ADD New layer option. Craete a
workspace and store if you haven't already
Create a new SQL view --Add New Layer
                      --Choose your workspace where roads_noded is published
                      --Select Configure New SQL View
Name the query as nearest_vertex
In the sql view write:
SELECT
  v.id,
  v.the_geom
FROM
  roads_noded_vertices_pgr AS v,
  roads_noded AS e
WHERE
  v.id = (SELECT
            id
          FROM roads_noded_vertices_pgr
          ORDER BY the_geom <-> ST_SetSRID(ST_MakePoint(%x1%, %y1%, %x2%, %y2%), 4326) LIMIT 1)
  AND (e.source = v.id OR e.target = v.id)
GROUP BY v.id, v.the_geom  

Click Guess Parameters from SQL
ADD the following in the default value boxes:
y1  33.5183   
x1  73.1726
y2  33.5239
x2  73.1789

ADD ^[\d\.\+-eE]+$ in the validation regular expression for each
Click refresh and select point as the geometry. Set SRID to 4326.

Then save it.

Now create another sql view. Name it pgRouting
Use the following query im sql view:

SELECT ST_MakeLine(route.geom) FROM (
    SELECT geom FROM pgr_fromAtoB('roads_noded', %x1%, %y1%, %x2%, %y2%
  ) ORDER BY seq) AS route

After this all steps are same from the previous sql view. Just change the validation parameters to ^-?[\d.]+$
and geometry to MultiLineString, the rest is the same.

Now use the new.html file on github to make the gui for the routing.










